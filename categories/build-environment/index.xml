<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Build Environment on Prometheus&#39;s Blog</title>
    <link>https://Prometheussssss.github.io/categories/build-environment/</link>
    <description>Recent content in Build Environment on Prometheus&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 08 Aug 2019 10:16:49 +0800</lastBuildDate>
    
	<atom:link href="https://Prometheussssss.github.io/categories/build-environment/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Build Lnmp Environment</title>
      <link>https://Prometheussssss.github.io/2019/build-lnmp-environment/</link>
      <pubDate>Thu, 08 Aug 2019 10:16:49 +0800</pubDate>
      
      <guid>https://Prometheussssss.github.io/2019/build-lnmp-environment/</guid>
      <description>环境准备 安装CentOS7 安装nginx  安装CentOS7时选择安装了基本开发环境，所以不必先安装gcc，gcc-c++  ==1. 安装rewrite模块所需PCRE库==
cd /usr/loacl #将其装入local文件夹中 wget https://sourceforge.net/projects/pcre/files/pcre/8.43/pcre-8.43.tar.gz #下载最新PCRE  tar -zxvf pcre-8.43.tar.gz #解压 cd pcre-8.36 ./configure #配置环境 make &amp;amp;&amp;amp; make install #编译安装  ==2. 安装SSL库==
和第一步原理类似
cd .. wget http://www.openssl.org/source/openssl-1.1.1c.tar.gz tar -zxvf openssl-1.0.1j.tar.gz cd openssl-1.0.1j ./configure make &amp;amp;&amp;amp; make install  ==3. 安装zlib库==
cd /usr/local/ wget http://zlib.net/zlib-1.2.11.tar.gz tar -zxvf zlib-1.2.11.tar.gz cd zlib-1.2.11 ./configure make &amp;amp;&amp;amp; make instal  ==4.安装nginx==
cd /usr/local/ wget http://nginx.org/download/nginx-1.16.0.tar.gz tar -zxvf nginx-1.</description>
    </item>
    
    <item>
      <title>Github Pages&#43;Hugo博客搭建</title>
      <link>https://Prometheussssss.github.io/2019/build-my-blog-with-hugogithub-pages/</link>
      <pubDate>Wed, 07 Aug 2019 22:49:07 +0800</pubDate>
      
      <guid>https://Prometheussssss.github.io/2019/build-my-blog-with-hugogithub-pages/</guid>
      <description>使用Github+Hugo搭建Blog 经群里大师傅推荐，我选择使用Github+Hugo搭建我的blog。
相较于Hexo，基于go语言的Hugo有更快的生成速度。
0x00.准备工作  注册Github账号 安装Git客户端  0x01.搭建GithubPages  新建一个Github repository,名字要用username.github.io(username是Github用户名)  0x02.安装hugo  hugo基于go语言，在早期版本我们先要安装go语言，在现有版本中已经不需要安装任何依赖，直接下载即可。下载地址 下载完成后解压到安装目录，并将目录加入环境变量中。在这里我将hugo解压到E:/Hugo/bin中，安装完成后输入hugo version进行验证。   进入到将要存放博客文件的目录中使用hugo new site+网站名创建网站。
cd Hugo\Mysites hugo new site Prometheussssss.github.io    网站结构  我们的Mysites目录下将会出现一个名为Prometheussssss.github.io的新文件夹，目录如下,其中archetypes包括内容类型，在创建新内容时自动生成内容的配置。config.toml是网站的配置属性文件。content文件夹里放你网站的内容，例如你发布的博客文章。data目录是Hugo使用的配置文件存放的地方。layout目录存放布局内容，决定内容如何呈现。static目录存放静态资源如图片、css等。themes用于存放网站主题。1^
|-- archetypes |-- config.toml |-- content |-- data |-- layouts |-- static |-- themes  0x03.换个皮肤 主题会放在themes文件夹下，在这里我选择LeaveIt主题。
cd themes git clone https://github.com/liuzc/LeaveIt.git  0x04.编辑文章 在项目界面下可以使用hugo new命令在content目录下新建相应文件。
 创建一个about界面。
hugo new about.md   about.md 会被自动生成到 content/about.</description>
    </item>
    
  </channel>
</rss>